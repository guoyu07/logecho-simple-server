// Generated by CoffeeScript 1.7.1
(function() {
  var Buffer, argv, data, decode, dispatcher, getHandler, http, postHandler, server, url, uuid;

  http = require('http');

  url = require('url');

  Buffer = require('buffer');

  uuid = require('node-uuid');

  argv = require('optimist')["default"]('k', uuid.v4())["default"]('h', '0.0.0.0')["default"]('p', null)["default"]('s', null).argv;

  data = {};

  console.log(argv.k);

  if (argv.p == null) {
    argv.p = argv.s != null ? 443 : 80;
  }

  decode = function(buff) {
    var k, line, lines, newData, v, _i, _len, _ref, _results;
    lines = buff.split("\n");
    newData = {};
    _results = [];
    for (_i = 0, _len = lines.length; _i < _len; _i++) {
      line = lines[_i];
      _results.push((_ref = line.split(' '), k = _ref[0], v = _ref[1], _ref));
    }
    return _results;
  };

  dispatcher = function(req, res) {
    var info;
    info = url.parse(req.url, true);
    console.log(req);
    if (req.method === 'GET') {
      return getHandler(info, req, res);
    } else if (req.method === 'POST') {
      return postHandler(info, req, res);
    }
  };

  getHandler = function(info, req, res) {
    var path;
    path = info.pathname;
    if (data[path] != null) {
      res.write(data[path]);
      res.statusCode = 200;
    } else {
      res.write('<h1>404</h1>');
      res.statusCode = 404;
      res.statusMessage = 'Not found';
    }
    return res.end();
  };

  postHandler = function(info, req, res) {
    var buff, key;
    key = info.query.key;
    console.log(req);
    if ((key != null) && key === argv.k) {
      buff = '';
      req.on('data', function(chunk) {
        return buff += chunk.toString();
      });
      return req.on('end', function() {
        res.write('OK');
        res.end();
        return decode(buff);
      });
    } else {
      res.write('<h1>Not Allowed</h1>');
      res.statusCode = 403;
      res.statusMessage = 'Forbidden';
      res.write('WRONG KEY');
      return res.end();
    }
  };

  server = http.createServer(dispatcher);

  server.listen(argv.p, argv.h);

}).call(this);
